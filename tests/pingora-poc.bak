use async_trait::async_trait;
use pingora::lb::discovery::ServiceDiscovery;
use pingora::prelude::*;
use pingora::lb::selection::Random;
use pingora::lb::Backend;
use pingora::lb::Backends;
use pingora::protocols::l4::socket::SocketAddr;
use std::{
    collections::{ BTreeSet, HashMap}, 
    sync::Arc, time::Duration
};


pub struct LB {
    load_balancer: Arc<LoadBalancer<Random>>
}

struct SD;

#[async_trait]
impl ServiceDiscovery for SD {
    async fn discover(&self) -> Result<(BTreeSet<Backend>, HashMap<u64, bool>)> {
        let ip_address_list: String = std::fs::read_to_string("tests/upstreams.txt").unwrap();
        println!("ip_address_list={}",ip_address_list);
        let mut ip_addresses:Vec<SocketAddr> = Vec::new();

        for line in ip_address_list.lines() {
            if !line.is_empty() {
                ip_addresses.push(
                    line.parse::<SocketAddr>().unwrap()
                )
            }
        }
        let mut backends: BTreeSet<Backend> = BTreeSet::new();

        for addr in ip_addresses {
            backends.insert( Backend { addr, weight: 1 } );
        }

        Ok((backends, HashMap::new()))
    }
}

#[async_trait]
impl ProxyHttp for LB {
    type CTX = ();
    fn new_ctx(&self) -> () {
        ()
    }

    async fn upstream_peer(
            &self,
            session: &mut Session,
            ctx: &mut Self::CTX,
        ) -> Result<Box<HttpPeer>> {
        
        println!("Header={:?}",session.get_header("SAMPLE").unwrap().to_str().unwrap().to_string());
        self.load_balancer.update().await.unwrap();
        let upstream = self.load_balancer.select(b"",256)
        .unwrap();
        println!("upstream peer is: {:?}",upstream);
        let peer:  Box<HttpPeer> = Box::new(HttpPeer::new(upstream, false, "0.0.0.0".to_string()));
        Ok(peer)        
    }

    async fn upstream_request_filter(
            &self,
            _session: &mut Session,
            _upstream_request: &mut RequestHeader,
            _ctx: &mut Self::CTX,
        ) -> Result<()>
        where
            Self::CTX: Send + Sync, {
        _upstream_request.insert_header("Host", "one.one.one.one").unwrap();
        _upstream_request.insert_header("Test", "pingora-test").unwrap();
        Ok(())
    }
    
}

fn main() {
    let mut my_server = Server::new(Some(Opt::default())).unwrap();
    my_server.bootstrap();

    let backends = Backends::new(Box::new(SD));
    let mut upstreams: LoadBalancer<pingora::lb::selection::weighted::Weighted<pingora::lb::selection::algorithms::Random>> = LoadBalancer::from_backends(backends);
    let hc = TcpHealthCheck::new();
    upstreams.set_health_check(hc);
    upstreams.health_check_frequency = Some(Duration::from_secs(1));

    let background = background_service("health check", upstreams);
    let upstreams = background.task();

    let mut lb: pingora::services::listening::Service<pingora::proxy::HttpProxy<LB>> = http_proxy_service(&my_server.configuration, LB {
        load_balancer: upstreams
    });
    lb.add_tcp("0.0.0.0:6170");
    my_server.add_service(background);
    my_server.add_service(lb);

    my_server.run_forever();
}
